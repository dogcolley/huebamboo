{"version":3,"sources":["useStores.js","component/navM.js","component/head.js","component/utility02.js","component/utility03.js","component/list2.js","component/lists2.js","component/listAticle.js","component/list.js","component/lists.js","component/utility01.js","component/from01.js","component/sideAticle.js","component/content.js","component/aside.js","App.js","serviceWorker.js","index.js"],"names":["UseStore","store","Object","test","device","win_wd","win_ht","bestList","Array","newList","commendList","commendList2","bgTheme","stateM","activeCM","activeNL","activeBL","activeHS","activeAS","APIURL","memberNick","memberIp","memberCK","writeCon","refresh","window","location","reload","changeTheme","updateDevice","innerWidth","innerHeight","changeNavM","state","openDcrt","clearDcrt","getNick","mode","axios","method","url","headers","then","response","data","nick","login","console","log","getList","catch","err","updateCommend","updateContent","a","pw","contents","deleteContent","deleteCommend","clickLS","wicthHue","decorate","observable","action","UseStoreContext","createContext","NavM","observer","setID","useStores","useContext","className","style","bottom","left","right","margin","zIndex","background","type","onClick","Head","utility02","useState","utility03","top","List","value","set_item","set_arr","Lists","set_id","set_value","useStore","arr","useEffect","map","key","id","listAticle","set_tit","addEventListener","href","utility01","changeNick","From01","onSubmit","e","preventDefault","editor","ClassicEditor","onInit","onChange","event","getData","onBlur","onFocus","Commend","set_name","Content","Aside","minWidth","maxWidth","App","Boolean","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"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","file":"static/js/main.ed6909d3.chunk.js","sourcesContent":["import { observable,decorate, reaction , action, computed, configure } from 'mobx';\r\nimport { MobXProviderContext, inject} from 'mobx-react';\r\nimport React,{ createContext,useState } from \"react\"\r\nimport axios from 'axios';\r\n\r\n\r\nclass UseStore {\r\n  store = new Object({\r\n    test:'',\r\n    device : \"PC\",\r\n    win_wd : 0,\r\n    win_ht : 0,\r\n    bestList : new Array(),\r\n    newList : new Array(),\r\n    commendList : new Array(),\r\n    commendList2 : new Array(),\r\n    bgTheme : 'wirte', \r\n    stateM : '',\r\n    activeCM : false, //commend\r\n    activeNL : true, //new\r\n    activeBL : false, //best\r\n    activeHS : true, // history\r\n    activeAS : false, // side\r\n    APIURL : 'http://13.209.3.125:4000/api/',\r\n    memberNick : '',\r\n    memberIp : '',\r\n    memberCK : '',\r\n    writeCon : ''\r\n  });\r\n\r\n //functions \r\n \r\n //01. state change\r\n refresh = () => { //refresh App;\r\n    window.location.reload();\r\n }\r\n \r\n changeTheme = (store) => {\r\n    store.bgTheme = store.bgTheme == 'wirte' ? 'dark' : 'wirte';\r\n    return store.bgTheme;\r\n  };\r\n\r\n\r\n //02. window resize event\r\n updateDevice = (store) => {\r\n  store.win_wd = window.innerWidth;\r\n  store.win_ht = window.innerHeight;\r\n  if(store.win_wd >1024) store.device = 'PC';\r\n  else if(store.win_wd > 768) store.device = 'TAB';\r\n  else store.device = 'M';\r\n\r\n  store.activeHS = store.win_wd > 768 ? true : false\r\n\r\n  return store.device;\r\n};\r\n\r\n//03. mobile Nav click event \r\nchangeNavM = (store, state) => {\r\n  if(state == 'listChnage'){\r\n    if(store.device ==\"M\" && (store.activeCM || store.activeHS)){\r\n      store.activeCM = false;\r\n      store.activeHS = false;\r\n    }else{\r\n      store.activeNL = store.activeNL ? false : true;\r\n      store.activeBL = store.activeBL ? false : true;\r\n    }\r\n  } \r\n  if(state == 'historyShow'){\r\n    store.activeHS = true;\r\n    store.activeCM = false;\r\n  } \r\n  if(state == 'commendShow'){\r\n    store.activeCM = true;\r\n    store.activeHS = false;\r\n  }\r\n}\r\n\r\nopenDcrt = (store) => {\r\n  store.activeAS = true;\r\n}\r\n\r\nclearDcrt = (store) => {\r\n  store.activeAS = false;\r\n}\r\n\r\n//04. use Member [login,logout]\r\ngetNick = (store,mode='new') =>{\r\n  if(store.memberNick == '' && mode == 'new'){\r\n    axios({\r\n      method: 'get',\r\n      url: `http://13.209.3.125:4000/api/nick/get`,\r\n      headers: { 'Access-Control-Allow-Origin': true },\r\n    }).then(response => {\r\n      store.memberNick = response.data.nick;\r\n    })\r\n  }\r\n}\r\n\r\n\r\n login = () =>{\r\n   console.log('login join...');\r\n   return 'test';\r\n }\r\n\r\n//05. list\r\ngetList = (store, mode = 'newList') => {\r\n  const arr = new Array();\r\n  axios({\r\n    method: 'get',\r\n    url: `http://13.209.3.125:4000/api/post/list`,\r\n    headers: { 'Access-Control-Allow-Origin': true },\r\n  })\r\n  .then(response => {\r\n      if(mode == 'newList'){\r\n        store.newList = [];\r\n        store.newList = response.data.data;\r\n      }else if(mode == 'bestList'){\r\n        store.bestList = [];\r\n        store.bestList = response.data.data;\r\n      }\r\n      /*\r\n      for(let i=0;i<response.data.data.length;i++){\r\n        if(mode == 'newList'){\r\n          store.newList.push(response.data.data[i]);\r\n        }else if(mode == 'bestList'){\r\n          store.bestList.push(response.data.data[i]);\r\n        }\r\n      }\r\n      */\r\n  })\r\n  .catch(err => console.log('err', err));\r\n\r\n}\r\n\r\n//06. content control\r\n\r\n updateCommend = () =>{\r\n   //ip\r\n   //name\r\n   //contend\r\n }\r\n \r\n\r\n  updateContent = async ( store, mode = 'w') => {\r\n    axios({\r\n      method: 'post',\r\n      url: `http://13.209.3.125:4000/api/post/write`,\r\n      headers: { 'Content-type':'application/json' },\r\n      data:{\r\n        nick:store.memberNick, \r\n        pw:'1111', \r\n        contents: store.writeCon \r\n      }\r\n    })\r\n  /*\r\n updateContent = (store,mode = 'w') =>{\r\n  axios({\r\n    method: 'post',\r\n    url: `http://13.209.3.125:4000/api/post/write`,\r\n    headers: { 'Content-type': 'application/x-www-form-urlencoded'},\r\n    headers: {\r\n      'Content-Type': 'application/json'\r\n    },\r\n     data : [{\r\n      nick:'test2',\r\n      pw:'1234',\r\n      contents:'test2'\r\n    }]\r\n  })\r\n  */\r\n  \r\n  .then(response => {\r\n    console.log(response);\r\n  })\r\n }\r\n \r\n deleteContent = () =>{\r\n   //idx\r\n   //pw\r\n }\r\n\r\n deleteCommend = () =>{\r\n   //idx\r\n   //pw\r\n }\r\n\r\n clickLS = () => {\r\n\r\n }\r\n\r\n  //이게 이벤트가 끝나고 싷행되는 부분\r\n  wicthHue = () => {\r\n    /*\r\n    UseStore.store , (value, reaction) =>{\r\n      console.log(`a 값이 ${value} 로 바뀌었네요!`);\r\n    }\r\n    */\r\n  }\r\n}\r\n\r\n\r\ndecorate(UseStore , {\r\n  store: observable,\r\n  changeTheme: action,\r\n  updateDevice: action,\r\n  getList: action,\r\n  updateContent: action\r\n  /*\r\n  sum : computed\r\n  wicthHue : reaction,\r\n  */\r\n});\r\n\r\n/* \r\n//데코레이터 부분을 여기로 추가다 만약에 대코레이터를 사용하지않을경우에는 eject나 babel로 설정해서 @를 사용하는 문법을 쓰면 된다.\r\n// decorate(지정클래스 , { \r\n//  함수명 : mobx 대코,\r\n// reaction, computed , action , observable\r\n//})\r\n*/\r\n\r\n\r\nexport const UseStoreContext = createContext(new UseStore());\r\n\r\n\r\n\r\n\r\n/*\r\n // 중앙 데이터 관리 테스트 mobxs react 함수형 버전\r\n\r\nfunction reducer(state, action) {\r\n  // action.type 에 따라 다른 작업 수행\r\n  switch (action.type) {\r\n    case 'INCREMENT':\r\n      return { value: state.value + 1 };\r\n    case 'DECREMENT':\r\n      return { value: state.value - 1 };\r\n    default:\r\n      // 아무것도 해당되지 않을 때 기존 상태 반환\r\n      return state;\r\n  }\r\n}\r\n*/\r\n","import React,{useContext,useState} from 'react';\r\nimport {UseStoreContext} from '../useStores';\r\nimport { observer,inject,MobXProviderContext } from \"mobx-react\";\r\n\r\nconst NavM  = observer((setID) => {\r\n\r\n    const useStores = useContext(UseStoreContext);\r\n    const store = useStores.store;\r\n\r\n    const changeTheme = () =>{\r\n        useStores.changeTheme(store);\r\n    }\r\n\r\n    const chageState1 = () =>{\r\n        useStores.changeNavM(store,'listChnage');\r\n    }\r\n    const chageState2 = () =>{\r\n        useStores.changeNavM(store,'historyShow');\r\n    }\r\n\r\n    \r\n    return (\r\n        <nav className=\"navM PT_ds_non T_ps_fx\" style={{\r\n            bottom:0+'%',\r\n            left:0,\r\n            right:0,\r\n            margin: '0 auto',\r\n            zIndex:99,\r\n            background: 'pink',\r\n        }}>\r\n            <ul className=\"clear T_ly_4 T_ft_ct\">\r\n                <li><button type=\"button\" onClick={useStores.refresh}>새로고침</button></li>\r\n                <li><button type=\"button\" onClick={changeTheme}>테마변경</button></li>\r\n                <li><button type=\"button\" onClick={chageState1}>\r\n                    {store.activeNL ? '베스트글' : '최신글'}    \r\n                </button></li>\r\n                <li><button type=\"button\" onClick={chageState2}>히스토리보기</button></li>\r\n            </ul>\r\n        </nav>\r\n    )\r\n}); \r\n\r\nexport default NavM;","import React,{useContext,useState,useEffect} from 'react';\r\nimport { observable,decorate, reaction , action, computed, configure } from 'mobx';\r\nimport { observer,inject,MobXProviderContext } from \"mobx-react\";\r\nimport {UseStoreContext} from '../useStores';\r\nimport NavM from './navM';\r\n\r\n\r\n\r\nconst Head = observer(() => {\r\n\r\n  const useStores = useContext(UseStoreContext);\r\n  \r\n  const store = useStores.store;\r\n  //이게 하단에 들어가는 스테이트가 변화되었을때 들어가는 부분인데 이건 제어가 없을경우엔 빼도 됨\r\n  //const [device,setDevice] = useState(useStores.store.device);\r\n  //const [theme,setTheme] = useState(useStores.store.bgTheme);\r\n\r\n  return(\r\n    <>\r\n    <header>\r\n        <h1><span className=\"sound_only\">휴월드 대나무소통방입니다.</span></h1>\r\n        { store.device == 'M' ?  <NavM/> : '' }\r\n    </header>\r\n    </>\r\n  );\r\n})\r\n\r\nexport default Head;","import React,{useContext,useState,useEffect,useCallback} from 'react'; \r\nimport { observer,inject,MobXProviderContext } from \"mobx-react\";\r\nimport {UseStoreContext} from '../useStores';\r\n\r\nconst utility02 = observer(() => {\r\n\r\n    const useStores = useContext(UseStoreContext);\r\n    const store = useStores.store;\r\n    const [theme,setTheme] = useState(0);\r\n\r\n    const changeState1 = () =>{\r\n        useStores.changeNavM(store,'historyShow');\r\n        let a = theme;\r\n        setTheme(a++);\r\n    }\r\n\r\n    return (\r\n<       div className=\"T_fl_Crt clear T_mg_CPlt2\">\r\n            <button type=\"button\" className=\"\" >좋아요</button>\r\n            <button type=\"button\" className=\"\" >싫어요</button>\r\n            <button type=\"button\" className=\"\" >커멘드</button>\r\n        </div>\r\n    )\r\n\r\n});\r\n\r\nexport default utility02;","import React from 'react'; \r\n\r\nconst utility03 = () => {\r\n    return(\r\n    <div className=\"T_ps_ab\" style={{right:0,top:0}}>\r\n        <button>삭제</button>\r\n        <button>공유하기</button>\r\n        <button>신고하기</button>\r\n      </div>\r\n\r\n    )\r\n}\r\n\r\nexport default utility03","import React from 'react';\r\nimport Utility02 from './utility02';\r\nimport Utility03 from './utility03';\r\n\r\nconst List = (value) => {\r\n    //console.log(value);\r\n    const set_item = value.set_arr;\r\n    return (\r\n        <li className=\"T_ps_rl T_pd_Pall5 T_ds_block U_bd_btm01\">\r\n        <div className=\"T_ps_rl\">\r\n          <h4>{set_item.nick} <span className=\"sound_only\">작성자</span></h4>\r\n          <Utility03/>\r\n        </div>\r\n        <p className=\"T_pd_Pht5\">{set_item.contents}</p>\r\n        <Utility02/>\r\n        </li>\r\n    )\r\n}\r\n\r\nexport default List;","import React,{useContext, useState, useEffect} from 'react';\r\nimport {UseStoreContext} from '../useStores';\r\nimport List2 from './list2';\r\nimport axios from 'axios';\r\n\r\nconst Lists = (set_id) => {\r\n    const set_value = set_id.setID;\r\n    const useStore = useContext(UseStoreContext);\r\n    useStore.getList(useStore.store,set_value);\r\n    const store = useStore.store;\r\n    const arr = set_id == 'newList' ? store.newList : store.bestList;\r\n\r\n    useEffect(()=>{\r\n    },[set_id == 'newList' ? store.newList : store.bestList]);\r\n\r\n    return (\r\n        <ul className=\"J_list01 PT_ht_P95 T_ov_at U_bg_cfff U_ov_at\">\r\n            {arr.map((value)=> <List2 set_arr={value} key={value.id} /> )}\r\n        </ul>\r\n    )\r\n}\r\n\r\nexport default Lists;","import React,{useContext,useState,useEffect} from 'react';\r\nimport Lists from './lists2';\r\nimport { observer,inject,MobXProviderContext } from \"mobx-react\";\r\nimport {UseStoreContext} from '../useStores';\r\n\r\nconst listAticle  = observer((setID) => {\r\n    const useStores = useContext(UseStoreContext);\r\n    const store = useStores.store;\r\n    const set_id = setID.setID;\r\n    let set_tit = '';\r\n    if(set_id == 'bestList') set_tit = '베스트글';\r\n    if(set_id == 'newList') set_tit = '새로운글';\r\n\r\n    \r\n   \r\n    window.addEventListener(\"load\", () =>{\r\n      useStores.changeNavM(store,'listChnage');\r\n      useStores.getNick(store);\r\n    }); \r\n\r\n    const chageState = () =>{\r\n      useStores.changeNavM(store,'listChnage');\r\n    }\r\n\r\n    useEffect(()=>{},[store.activeBL]);\r\n\r\n    useEffect(()=>{},[store.activeNL]);\r\n\r\n    return(\r\n        <article id={set_id} className=\"PT_fl_lt T_ht_full TAB_wd_P60 PC_wd_P30 PT_pd_Pwd1 T_pd_Pht4 U_bg_c000 T_ps_rl U_bd_right01\">\r\n        <h3 className=\"PT_ft_sz25 T_ft_wh700 U_ft_cfff PT_ht_P5 clear\">\r\n          {set_tit}\r\n          {\r\n            (store.device !== 'PC')? \r\n            <button onClick={chageState} className=\"T_fl_rt T_ft_rem12\">\r\n              { store.activeNL ? '베스트글보기' : '새글보기' }\r\n            </button>\r\n            :\r\n            ''\r\n          }\r\n        </h3>\r\n        <Lists setID={set_id}/>\r\n      </article>\r\n    )\r\n});\r\n\r\nexport default listAticle;","import React from 'react';\r\nimport Utility02 from './utility02';\r\nconst List = () => {\r\n    return (\r\n        <li className=\"T_ps_rl T_pd_Pall5 T_ds_block U_bd_btm01\">\r\n            <div href=\"#\" className=\"T_ds_block \"> \r\n                <a className=\"T_pd_Pht5\">여기에는 뎃글들이 들어갑니다.</a>\r\n                <Utility02/>\r\n            </div>\r\n        </li>\r\n    )\r\n}\r\n\r\nexport default List;","import React from 'react';\r\nimport List from './list';\r\n\r\nconst Lists = (arr) => {\r\n    return (\r\n        <ul className=\"J_list01 PT_ht_P75 T_ov_at U_bg_cfff M_ht_P80\">\r\n            <List/>\r\n        </ul>\r\n    )\r\n}\r\n\r\nexport default Lists;","import React,{useContext,useState,useEffect,useCallback} from 'react'; \r\nimport { observer,inject,MobXProviderContext } from \"mobx-react\";\r\nimport {UseStoreContext} from '../useStores';\r\n\r\nconst utility01 = observer(() => {\r\n\r\n    const useStores = useContext(UseStoreContext);\r\n    const store = useStores.store;\r\n    \r\n    const changeTheme = () =>{\r\n        useStores.changeTheme(store);\r\n    }\r\n\r\n    const changeState1 = () =>{\r\n        useStores.changeNavM(store,'historyShow');\r\n    }\r\n\r\n    const openDeclaration = () =>{\r\n        useStores.openDcrt(store);\r\n    }\r\n\r\n    useEffect(()=>{},[store.bgTheme]);\r\n    useEffect(()=>{},[store.activeNL]);\r\n    useEffect(()=>{},[store.activeBL]);\r\n    useEffect(()=>{},[store.activeHS]);\r\n    useEffect(()=>{},[store.activeCM]);\r\n\r\n\r\n    return (\r\n        \r\n        <div className=\"T_ps_ab clear M_fl_Crt T_wd_full T_pd_Pwd5\" style={{top:2+'%',left:0}}>\r\n            <button className=\"M_mg_Plt2 PT_mg_Prt2\" onClick={useStores.refresh}>새로고침</button>\r\n            <button className=\"M_mg_Plt2 PT_mg_Prt2\" onClick={useStores.changeNick}>닉로그인</button>\r\n            <button onClick={openDeclaration}>신고하기</button>\r\n            <button className=\"T_fl_rt M_mg_Prt2\" onClick={changeTheme}>야간테마</button>\r\n            <button className=\"T_fl_rt T_mg_Prt2\" onClick={changeState1}>기록보기</button>\r\n        </div>\r\n    )\r\n});\r\n\r\nexport default utility01","import React,{useContext,useState, useRef, useCallback, useLayoutEffect, useEffect} from 'react';\r\nimport CKEditor from '@ckeditor/ckeditor5-react';\r\nimport ClassicEditor from '@ckeditor/ckeditor5-build-classic';\r\nimport { observer,inject,MobXProviderContext } from \"mobx-react\";\r\nimport {UseStoreContext} from '../useStores';\r\n\r\n\r\nconst From01  = observer(() => {\r\n\r\n    const useStores = useContext(UseStoreContext);\r\n    const store = useStores.store;\r\n\r\n    return (\r\n        <form  id=\"\" className=\"PT_ht_P20 T_fl_Clt T_pd_Ptop6\" onSubmit={(e) => {\r\n            e.preventDefault();\r\n            useStores.updateContent(store,'w');\r\n        }} >\r\n            <CKEditor\r\n                    editor={ ClassicEditor }\r\n                    data=\"<p>Hello from CKEditor 5!</p>\"\r\n                    onInit={ editor => {\r\n                        // You can store the \"editor\" and use when it is needed.\r\n                        //console.log( 'Editor is ready to use!', editor );\r\n                    } }\r\n                    onChange={ ( event, editor ) => {\r\n                        const data = editor.getData();\r\n                        //console.log( { event, editor, data } );\r\n                        store.writeCon = data;\r\n                    } }\r\n                    onBlur={ ( event, editor ) => {\r\n                        //console.log( 'Blur.', editor );\r\n                    } }\r\n                    onFocus={ ( event, editor ) => {\r\n                        //console.log( 'Focus.', editor );\r\n                    } }\r\n            />\r\n            {//<input className=\"IM_bd_all0 T_wd_P80 T_ht_full\" name=\"\"  id=\"\"/>\r\n            }\r\n            <button className=\"T_wd_P20 T_ht_full btn01\">댓글입력</button>\r\n        </form>\r\n    )\r\n});\r\n\r\nexport default From01;\r\n","import React,{useContext} from 'react';\r\nimport Lists from './lists';\r\nimport Utility01 from './utility01';\r\nimport From01 from './from01';\r\n\r\n//import {UseStoreContext} from '../useStores';\r\n\r\n\r\nconst Commend = (setID) => {\r\n    const set_id = setID.setID;\r\n    let set_name = \"\";\r\n\r\n    if(set_id == 'historyList')set_name = \"보았던글\";\r\n    if(set_id == 'commendList')set_name = \"댓글모음\";\r\n\r\n    return(\r\n        <article id=\"j_comment\" className=\"PT_ps_rl PT_fl_lt M_ps_ab M_wd_full PT_wd_P40 T_ht_full PT_pd_Pwd2 T_pd_Pht4 U_bg_cf9\" style={{top:0,left:0,zIndex:80}}>\r\n            <h3 className=\"PT_ft_sz25 T_ft_wh700 U_ft_c000 PT_ht_P5\">{set_name}</h3>\r\n            <Lists setID={set_id}/>\r\n            <From01/>\r\n            <Utility01/>\r\n        </article>\r\n    )\r\n}\r\n\r\nexport default Commend;","import React,{useContext, useState, useEffect} from 'react';\r\nimport {UseStoreContext} from '../useStores';\r\nimport { observer,inject,MobXProviderContext } from \"mobx-react\";\r\n\r\n/*\r\nimport { observable,decorate, reaction , action, computed, configure } from 'mobx';\r\nimport { observer,inject,MobXProviderContext } from \"mobx-react\";\r\nimport {UseStoreContext} from '../useStores';\r\n*/\r\n\r\n//component \r\nimport BestList from './listAticle';\r\nimport NewList from './listAticle';\r\nimport Commend from './sideAticle';\r\nimport HistoryList from './sideAticle';\r\n\r\nconst Content  = observer((setID) => {\r\n    const useStore = useContext(UseStoreContext);\r\n    const store = useStore.store;\r\n\r\n    useEffect(()=>{},[store.activeHS]);\r\n    \r\n    useEffect(()=>{},[store.activeCM]);\r\n    \r\n    useEffect(()=>{},[store.activeBL]);\r\n\r\n    useEffect(()=>{},[store.activeNL]);\r\n\r\n    useEffect(()=>{},[store.device]);\r\n\r\n    return(\r\n        <section id=\"J_content\" className=\"clear T_ht_full\">\r\n          <h2 className=\"sound_only\">휴월드 익명게시판</h2>\r\n          { (store.activeHS) ? <HistoryList setID=\"historyList\" /> : ''}\r\n          { (store.activeCM) ?  <Commend setID=\"commendList\" /> : ''}\r\n          { (store.device == 'PC' || store.activeBL) ? <BestList  setID=\"bestList\" /> : ''}\r\n          { (store.device == 'PC' || store.activeNL) ? <NewList setID=\"newList\" /> : ''}\r\n        </section>\r\n    )\r\n});\r\n\r\nexport default Content;","import React,{useContext,useState} from 'react';\r\nimport { observer,inject,MobXProviderContext } from \"mobx-react\";\r\nimport {UseStoreContext} from '../useStores';\r\n\r\nconst Aside = observer(() => {\r\n    \r\n    const useStores = useContext(UseStoreContext);\r\n    const store = useStores.store;\r\n    const [theme,setTheme] = useState(0);\r\n\r\n    const state_close = () =>{\r\n      useStores.clearDcrt(store);\r\n    }\r\n\r\n    return (\r\n        <div id=\"popLogin\" className=\"T_ps_ab T_wd_full T_ht_full\" style={{background:'rgba(0,0,0,0.7)',top:0,left:0,zIndex:100}}>\r\n          <div className=\"T_wd_full T_ht_full T_ds_table\">\r\n            <button type=\"button\" className=\"T_ps_ab T_wd_full T_ht_full\" style={{top:0,left:0}}>닫기</button>\r\n            <div className=\"U_bg_cfff T_pd_Pwd2 T_pd_Pht6 T_wd_P40 T_ht_P55 T_ps_ab\" style={{margin:'auto',minWidth:'300px',maxWidth:'600px',left:0,right:0,top:0,bottom:0}}>\r\n              <h3 className=\"T_mg_Pbtm5 T_ft_ct PT_ft_sz35 U_ft_c000\">여기에 팝업 제목</h3>\r\n              <form>\r\n                <input className=\"T_mg_Pbtm3 U_bd_all01 T_wd_full T_pd_Pht3 T_pd_Pwd4\" />\r\n                <input className=\"U_bd_all01 T_wd_full T_mg_Pbtm8 T_pd_Pht3 T_pd_Pwd4\" />\r\n                <button type=\"button\" className=\"T_wd_full T_pd_Pht3 T_mg_Pbtm2 U_bg_c000\">보내기</button>\r\n                <button type=\"button\" onClick={state_close} className=\"T_wd_full T_pd_Pht3 U_bd_all01\">닫기</button>\r\n              </form>\r\n            </div>\r\n          </div>\r\n        </div>\r\n    )\r\n});\r\n\r\nexport default Aside;","import React,{useContext,useState, useRef, useCallback, useLayoutEffect, useEffect} from 'react';\r\n///import {Route, Link} from 'react-router-dom'; //if you want router use that <Route path=\"주소규칙\" component={보여 줄 컴퍼넌트} />\r\nimport { observer,inject,MobXProviderContext } from \"mobx-react\";\r\nimport './css/App.scss';\r\n\r\n/*lib a&& plugin \r\nimport axios  from 'axios'; //use aixos \r\nimport { decorate, observable, action } from 'mobx'; //use mobx type class\r\nimport { observer } from \"mobx-react-lite\" // use mobx type hook\r\n*/\r\n\r\n//compunet\r\nimport Head from './component/head'; // head in mobile's nav btn's\r\nimport Content from './component/content'; //content in bestlist, newlist, histoy, commned\r\nimport Aside from './component/aside'; // aside in modal's loign, remove, 신고\r\n\r\n//use mobx \r\nimport {UseStoreContext} from './useStores';\r\n\r\n\r\n//make app here\r\n\r\nconst App  = observer(() => {\r\n  //setting instant state event and front (window)\r\n  const useStores = useContext(UseStoreContext);\r\n  const store = useStores.store;\r\n\r\n  window.addEventListener(\"resize\", () =>{\r\n    useStores.updateDevice(store);\r\n  });\r\n\r\n  window.addEventListener(\"load\", () =>{\r\n    useStores.updateDevice(store);\r\n  });\r\n\r\n  useEffect(()=>{},[useStores.store.device]);\r\n\r\n  useEffect(()=>{},[store.bgTheme]);\r\n  \r\n  useEffect(()=>{},[store.activeAS]);\r\n\r\n  return (\r\n    <>  \r\n      <a href=\"#J_content\" id=\"skipNav\">본문바로가기</a>\r\n      <div \r\n        className={store.device+' ' + store.bgTheme +' T_ps_rl T_wd_full T_ht_full'}\r\n      >\r\n        <Head/> \r\n        <Content/>\r\n        {\r\n           store.activeAS ? <Aside/> : ''\r\n        }\r\n      </div>\r\n    </>\r\n  );\r\n})\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import 'core-js/stable';\r\nimport 'regenerator-runtime/runtime';\r\nimport 'react-app-polyfill/ie9';\r\nimport 'react-app-polyfill/stable';\r\nimport '@babel/plugin-transform-arrow-functions'\r\n\r\nimport React from 'react';\r\nimport ReactDOM from 'react-dom';\r\n//import {BrowserRouter} from 'react-router-dom'; //if you want router use that\r\n//import {createStore} from 'dedux'; //if you want redux store use that\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\n//import rootReducer from './modules';//if you want redux store use that 'module here'\r\n//const sotre = createStore(rootReducer); //make redux\r\n\r\n\r\n// base render react \r\nReactDOM.render(\r\n    <App />, document.getElementById('root')\r\n);\r\n\r\n/* \r\n// if you want router use that\r\n\r\nReactDOM.render(\r\n    <BrowserRouter>\r\n        <App />    \r\n    </BrowserRouter>\r\n);\r\n\r\n*/\r\n\r\n/*\r\n// base render react \r\nReactDOM.render(\r\n    <App />, document.getElementById('root')\r\n);\r\n*/\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}